<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Bob 學習筆記]]></title>
  <link href="http://blog.poyi.tw/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.poyi.tw/"/>
  <updated>2015-07-17T00:02:07+08:00</updated>
  <id>http://blog.poyi.tw/</id>
  <author>
    <name><![CDATA[Bob (PoYi)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Ruby] 教學 - 基本使用介紹2]]></title>
    <link href="http://blog.poyi.tw/blog/2015/04/12/ruby-basic-2/"/>
    <updated>2015-04-12T22:27:04+08:00</updated>
    <id>http://blog.poyi.tw/blog/2015/04/12/ruby-basic-2</id>
    <content type="html"><![CDATA[<h2>Define Methods</h2>

<pre><code class="ruby 基本的method定義">def temp
  puts 123
end

temp() 
temp

def temp(a,b,c)
puts “#{a} , #{b}, #{c}”
end
temp(1,2,3)
temp 1 , 2 , 3

def temp(a,b,c=99) # 第三個參數若沒傳入的話預設值為99
puts “#{a} , #{b}, #{c}”
end
temp()  # wrong arguments (0 for 2..3) 錯誤訊息提示傳入值需要2~3個
temp(1,2)
temp(1,2,3)

def temp(a,b,c=99, *argv)   
  ap [a,b,c,argv]
end
temp()  # wrong arguments (0 for 2+) 錯誤訊息提示傳入值需要2個以上
temp(1,2,3,4,5,6,7,8)
</code></pre>

<pre><code class="ruby 進階的method定義 (block)">def temp(&amp;block)
end

temp(1)  #=&gt; wrong number of arguments (1 for 0) &amp;block不是傳入的參數
temp()   #=&gt; nil
temp(){puts "temp"} #=&gt; nil 
# 當temp()後面有block時會把這一段code放置&amp;block當中，但因為裡面沒有呼叫它執行所以nil


def temp2(&amp;abc)
  abc.call
end

temp2{puts "gogo"} #=&gt; "gogo"
</code></pre>

<pre><code class="ruby class methods  / instance methods">class Car
  def self.hi
    puts “aaa”
  end
  def hi
    puts “bbb”
  end
end

car = Car.new
Car.hi #=&gt; "aaa"
car.hi #=&gt; "bbb"
</code></pre>

<ul>
<li>attr_accessor 自動設定setter &amp; getter</li>
<li>attr_reader 設定getter</li>
<li>attr_writer 設定setter</li>
</ul>


<pre><code class="ruby attr_accessor 等同於 getter & setter">class Person
  # attr_accessor :name 
  def name # getter
    @name
  end

  def name=(str) # setter
    @name = str
  end
end

person = Person.new
person.name = 'Bob' # setter
person.name # =&gt; "bob" # getter
</code></pre>

<ul>
<li>$name:全域變數</li>
<li>@name:實例變數，作用域僅限定於 self 指示的物件</li>
<li>@@name: 類別變數，在class內才使用，跨class</li>
<li>name:區域變數(小寫字母或底線開頭；初始化前並沒有 nil 值)</li>
<li>Name:常數(大寫開頭；重覆定義時會出現警告)</li>
</ul>


<h4>Class &amp; Module</h4>

<p>Moudule只是一個不能被new的class
<figure class='code'><figcaption><span>class / module</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Class</span><span class="o">.</span><span class="n">superclass</span> <span class="c1">#=&gt; module&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">module</span> <span class="nn">Flyable</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fly</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">I</span> <span class="n">can</span> <span class="n">fly!</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Cat</span>
</span><span class='line'><span class="sr">  include Flyable</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">kitty</span> <span class="o">=</span> <span class="no">Cat</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">kitty</span><span class="o">.</span><span class="n">fly</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4>Error Handling</h4>

<p>沒額外指定變數的話，錯誤資訊會放至$!(ERROR_INFO)及$@(ERROR_POSITION)</p>

<pre><code class="ruby begin/rescue/ensure/end">begin
  # 有機會發生例外的code
rescue
  # 發現例外後要執行的code
ensure
  # 無論是否例外都會執行的code
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ruby] 教學 - 基本使用介紹]]></title>
    <link href="http://blog.poyi.tw/blog/2015/03/31/ruby-basic-1/"/>
    <updated>2015-03-31T22:27:04+08:00</updated>
    <id>http://blog.poyi.tw/blog/2015/03/31/ruby-basic-1</id>
    <content type="html"><![CDATA[<p>Rails熟了一點後就會發現其實大部分都是學會怎麼用它，卻很吃Ruby本身的概念</p>

<p>未來讓以後開發不會這麼吃力，來整複習一下好了 :D</p>

<h2>Everything is Ruby is an object</h2>

<p>Ruby 內皆為物件，無基本型別</p>

<pre><code class="ruby X.class，X.methods 的用法">123.methods #=&gt; 123可用的method列表  
123.class   #=&gt; Fixnum #知道class後就可以查doc  
true.class  #=&gt; TrueClass  
nil.class   #=&gt; NilClass  
</code></pre>

<pre><code class="ruby ">&gt; 2.even?
 =&gt; true
&gt; 3.next
 =&gt; 4
&gt; -1.abs
 =&gt; 1
</code></pre>

<h2>基本使用</h2>

<pre><code class="ruby 各種常見型別">123.class #integer
42343243243243243242343242344234234234.class #bignum  
123.123.class #float  
“123”.class #string  
[].class #array  
{}.class  #hash  
:abc.class #symbol  
nil.class #nilClass  
true.class #TrueClass
false.class #FalseClass  
</code></pre>

<h3>輸出String的用法</h3>

<pre><code class="ruby 輸出String的用法">“123” + “345” + “333”  
x = 18  
puts "your age is #{x}"  
puts ‘\n\t’ #單引號 (無視內容，直接輸出)  
puts "\n\t" #雙引號 (換行)
</code></pre>

<h3>Hash</h3>

<pre><code class="ruby hash宣告方式">x = {"wer" =&gt; 123, "sdf" =&gt; 234}  
y = {:wer =&gt; 123, :sdf =&gt; 234}  
#symbol 拿來當key用  
:wer.object_id  # 在hash中key使用symbol會比string還相對快    
</code></pre>

<h3>Nil/ False</h3>

<p>ruby只有兩種東西為非 => nil / false
其他都為true</p>

<pre><code class="ruby nil false">nil || false || 0   # 0    
nil &amp;&amp; false &amp;&amp; 0   # nil  
</code></pre>

<h3>判斷式</h3>

<h5>基本上if else</h5>

<pre><code class="ruby if/else if/elsif/else unless/end">if size &gt; 30  
  puts "winner"  
else  
  puts "loser"  
end
</code></pre>

<h5>因為在ruby只有false及nil為非，所以當你要判斷該變數有沒有值時可以直接這樣寫</h5>

<pre><code class="ruby ">if name
  puts name
else
  puts "error"
end
</code></pre>

<h5>後置判斷式，直接把if放後面</h5>

<pre><code class="ruby ">puts name if name # 當name有值時印出來，沒有值即略過
puts "error" unless name # 當name沒有值時印error
</code></pre>

<h5>簡單的判斷式也可以寫成單行</h5>

<pre><code class="ruby condition ? true : false">puts size &gt; 30 ? "winner" : "loser"    
</code></pre>

<h5>ruby的switch case寫法</h5>

<pre><code class="ruby case/when/end">case lang
when "java"
  puts "good"
when "python"
  puts "great!"
when "ruby"
  puts "perfect!"
else
  puts "WTF"
end
</code></pre>

<h3>迴圈</h3>

<p>在ruby中比較少在用for跟while迴圈，大部分情況都使用each(iterator迭代器)</p>

<pre><code class="ruby each">lang = ["ruby","python","java","c","php"]
for i in lang
  puts i
end

lang.each do |i|
  puts 'I love ' + i
end

[1,2,3,4,5,6].each do |i| end

3.times do
  puts 'Good Job!'
end
</code></pre>

<p>Reference: RailsFun - JokerCatz</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ruby] 匯出批次csv檔]]></title>
    <link href="http://blog.poyi.tw/blog/2014/05/06/ruby-csv-file/"/>
    <updated>2014-05-06T21:14:00+08:00</updated>
    <id>http://blog.poyi.tw/blog/2014/05/06/ruby-csv-file</id>
    <content type="html"><![CDATA[<p>讀取或寫入csv在ruby都蠻方便的，只是編碼或格式要稍微注意一下</p>

<h2>匯出csv</h2>

<pre><code class="ruby">header = ['name','money','age']
body = ['ruby','1000','18']
</code></pre>

<pre><code class="ruby export_to_csv_string 匯出csv的string格式再利用send_data下載">  head = 'EF BB BF'.split(' ').map{|a|a.hex.chr}.join() # 加入BOM，解決excel中文亂碼


  csv_string = CSV.generate(csv = head) do |csv|
    csv &lt;&lt; header
    csv &lt;&lt; body
  end

  # &gt; csv_string.encoding 執行這句會發現預設編碼為ACSII
  csv_string.force_encoding('big5')
  # BOM也可以這樣加 csv_string = "\xEF\xBB\xBF#{csv_string}"  
  # 若不需要調整格式就直接下載
  send_data csv_string
</code></pre>

<pre><code class="ruby export_to_csv 直接匯出檔案"> require 'csv'
 CSV.open("export.csv","w") do |csv|
   csv &lt;&lt; header
   csv &lt;&lt; body
 end
</code></pre>

<h2>半形轉全形</h2>

<p>在某些情況會需要轉出全形字元，照理說不用才對，<del>可能是因為合作對方的系統太爛</del>
其實也不太確定怎解，我單純用硬幹的方式
<figure class='code'><figcaption><span>convert_to_wide_word 大小寫英文數字轉全形字元</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">convert_to_wide_word</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>  <span class="n">text</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[a-v]/</span><span class="p">){</span><span class="o">|</span><span class="n">a</span><span class="o">|</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">ord</span> <span class="o">+</span> <span class="mi">41608</span><span class="p">)</span><span class="o">.</span><span class="n">chr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">big5</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[w-z]/</span><span class="p">){</span><span class="o">|</span><span class="n">a</span><span class="o">|</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">ord</span> <span class="o">+</span> <span class="mi">41673</span><span class="p">)</span><span class="o">.</span><span class="n">chr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">big5</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[A-Z]/</span><span class="p">){</span><span class="o">|</span><span class="n">a</span><span class="o">|</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">ord</span> <span class="o">+</span> <span class="mi">41614</span><span class="p">)</span><span class="o">.</span><span class="n">chr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">big5</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[0-9]/</span><span class="p">){</span><span class="o">|</span><span class="n">a</span><span class="o">|</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">ord</span> <span class="o">+</span> <span class="mi">41599</span><span class="p">)</span><span class="o">.</span><span class="n">chr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">big5</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">utf</span><span class="o">-</span><span class="mi">8</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)}</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;convert_to_wide_word(&amp;ldquo;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;rdquo;)</span>
</span><span class='line'><span class="sr"> =&gt; &amp;ldquo;０１２３４５６７８９ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚＡＢＣＤＥＦＧＨＩＪＫＬ</span>
</span><span class='line'><span class="sr"> ＭＮＯＰＱＲＳＴＵＶＷＸＹＺ&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure>
匯出匯入csv也可以試試FasterCSV這個gem</p>

<p>Reference:</p>

<p><a href="http://www.sitepoint.com/guide-ruby-csv-library-part/">http://www.sitepoint.com/guide-ruby-csv-library-part/</a></p>

<p><a href="http://blog.inheart.tw/2013/09/rubyraisl-csv-excel.html">http://blog.inheart.tw/2013/09/rubyraisl-csv-excel.html</a></p>

<p><a href="http://salayhin.wordpress.com/2014/05/10/export-csv-file-from-rails-console/">http://salayhin.wordpress.com/2014/05/10/export-csv-file-from-rails-console/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ruby] require,load,include,extend]]></title>
    <link href="http://blog.poyi.tw/blog/2014/03/16/ruby-require-load-include-extend/"/>
    <updated>2014-03-16T21:14:00+08:00</updated>
    <id>http://blog.poyi.tw/blog/2014/03/16/ruby-require-load-include-extend</id>
    <content type="html"><![CDATA[<h2>require vs load</h2>

<p>首先require與load都是用來載入指定的檔案
差別在於使用require只會調用一次，且副檔名可省略，load則相反。</p>

<pre><code class="ruby random.rb">$a = (rand * 10).floor
</code></pre>

<pre><code class="ruby use_require.rb 產出的兩個值相同(只載入一次random.rb)">require "./random"
puts $a
require "./random" # 此行無效果
puts $a
</code></pre>

<pre><code class="ruby use_load.rb 產生的兩個值不一定相同">load "./random.rb"
puts $a
load "./random.rb"
puts $a
</code></pre>

<hr />

<h2>include vs extend</h2>

<p>include: 將目標當作instance來使用；並不直接擁有method，需建立一個實例後才能用
extend: 相當於把目標的code直接放進來；具有目標的class methods</p>

<pre><code class="ruby include_extend.rb">module Say
  def say_hi
    puts "Hi!"
  end
end

class People
  include Say
end

class Person
  extend Say # 具有Say的method，可直接呼叫
end
</code></pre>

<pre><code class="bash irb">001 &gt; require './include_extend.rb'
 =&gt; true 
002 &gt; Person.say_hi
Hi!
 =&gt; nil 
003 &gt; People.new.say_hi
Hi!
 =&gt; nil 
</code></pre>

<p>Reference:</p>

<p><a href="http://www.slideshare.net/BruceLi2/rubypart2">http://www.slideshare.net/BruceLi2/rubypart2</a>
<a href="http://cat-son.blogspot.tw/2012/10/2-rubyinclude-extendrequire.html#sthash.QduzPsMe.cFJYqpMb.dpbs">http://cat-son.blogspot.tw/2012/10/2-rubyinclude-extendrequire.html#sthash.QduzPsMe.cFJYqpMb.dpbs</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Mac] Ruby on Rails 基本環境建置]]></title>
    <link href="http://blog.poyi.tw/blog/2014/01/17/rails-mac-os-environment-build/"/>
    <updated>2014-01-17T12:47:00+08:00</updated>
    <id>http://blog.poyi.tw/blog/2014/01/17/rails-mac-os-environment-build</id>
    <content type="html"><![CDATA[<p>是說終於買了mac，省去開箱文趕緊把環境用好來繼續練習ROR!!
但使用上還是有一點不習慣，會覺得有些地方也蠻不人性化，但相對穩定就是了</p>

<h2>以下環境為OS X 10.9.1</h2>

<p>1.安裝xcode-select
Command line tool已經獨立出來，不需要安裝XCode了
<code>bash terminal
$ xcode-select --install
</code>
<img src="http://user-image.logdown.io/user/2740/blog/2734/post/176032/wrVy25UMQkeJEnuNKSEq_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-01-17%20%E4%B8%8B%E5%8D%889.07.40.png" alt="螢幕快照 2014-01-17 下午9.07.40.png" /></p>

<p>如果安裝失敗的話也可以到<a href="https://developer.apple.com/downloads/index.action?q=xcode">這裡</a>下載
<img src="http://user-image.logdown.io/user/2740/blog/2734/post/176032/umDZbcPSNWfhQ0VNDr7l_%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-01-17%20%E4%B8%8B%E5%8D%8810.01.05.png" alt="螢幕快照 2014-01-17 下午10.01.05.png" /></p>

<p>2.安裝homebrew
<code>bash terminal
$ ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)"
</code></p>

<p>3.安裝所需要的工具
<code>bash terminal
$ brew install git
</code></p>

<p>4.安裝RVM
<code>bash terminal
$ curl -L https://get.rvm.io | bash -s stable
</code>
5.透過RVM來安裝RUBY
<code>bash terminal
$ rvm install ruby
</code>
6.透過RVM來安裝RubyGems
<code>bash terminal
$ rvm rubygems current
</code>
7.安裝Rails
<code>bash terminal
$ gem install rails
</code></p>

<hr />

<p>XCode:官方提供的一個IDE，主要用來開發IOS APP，不過它也包含了一些開發其他語言所需的環境
Homebrew: OSX 套件管理工具
RVM (Ruby Version Manager):Ruby版本管理工具，便於切換不同版本</p>

<p>Reference:</p>

<p><a href="http://www.computersnyou.com/2025/2013/06/install-command-line-tools-in-osx-10-9-mavericks-how-to/">http://www.computersnyou.com/2025/2013/06/install-command-line-tools-in-osx-10-9-mavericks-how-to/</a>
<a href="http://www.slideshare.net/marsz330/ruby-on-rails-for-mac">http://www.slideshare.net/marsz330/ruby-on-rails-for-mac</a></p>
]]></content>
  </entry>
  
</feed>
