<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c# | Bob 學習筆記]]></title>
  <link href="http://blog.poyi.tw/blog/categories/c-number/atom.xml" rel="self"/>
  <link href="http://blog.poyi.tw/"/>
  <updated>2016-07-09T18:04:55+08:00</updated>
  <id>http://blog.poyi.tw/</id>
  <author>
    <name><![CDATA[Bob (PoYi)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[C#] IEnumerable vs IQueryable]]></title>
    <link href="http://blog.poyi.tw/blog/2013/09/30/c-ienumerable/"/>
    <updated>2013-09-30T14:34:00+08:00</updated>
    <id>http://blog.poyi.tw/blog/2013/09/30/c-ienumerable</id>
    <content type="html"><![CDATA[<p>在linq的使用上，IEnumerable<T>是不可或缺的泛型介面
像是foreach迴圈就是利用IEnumerable的特性(MoveNext)來實現逐一檢查。</p>

<p>而IQueryable<T>又繼承了IEnumerable<T>&hellip;</p>

<p>兩者的差別從概念上來說：
<strong>IEnumerable<T></strong>:先將查詢的值取出，再一層一層做篩選。
<strong>IQueryable<T></strong>:把全部Linq翻成T-SQL，直到真正要使用時才去執行。</p>

<pre><code class="c# IEnumerable">// list1
IEnumerable&lt;Employee&gt; list1 = myDB.Employees.Where(p =&gt; p.Name.StartsWith("S"));
list1 = list1.Take&lt;Employee&gt;(10); 

// list2
IQueryable&lt;Employee&gt; list2 = myDB.Employees.Where(p =&gt; p.Name.StartsWith("S"));
list2 = list2.Take&lt;Employee&gt;(10); 
</code></pre>

<pre><code class="SQL SQL">// list1
SELECT [t0].[EmpID], [t0].[EmpName], [t0].[Salary] FROM [Employee] AS [t0]
WHERE [t0].[EmpName] LIKE @p0

// list2
SELECT TOP 10 [t0].[EmpID], [t0].[EmpName], [t0].[Salary] FROM [Employee] AS [t0]
WHERE [t0].[EmpName] LIKE @p0
</code></pre>

<p>可以看到 IQueryable 在執行時直接向SQL要求TOP 10；而 IEnumerable 則是把全部撈出來再做一些篩選。</p>

<p>Reference:
<a href="http://msdn.microsoft.com/zh-tw/library/ttw7t8t6.ASPX">http://msdn.microsoft.com/zh-tw/library/ttw7t8t6.ASPX</a>
<a href="http://www.cnblogs.com/seebook/archive/2009/02/21/1395310.html">http://www.cnblogs.com/seebook/archive/2009/02/21/1395310.html</a>
<a href="http://www.dotnet-tricks.com/Tutorial/linq/I8SY160612-IEnumerable-VS-IQueryable.html">http://www.dotnet-tricks.com/Tutorial/linq/I8SY160612-IEnumerable-VS-IQueryable.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[ASP.NET] 自動寄信]]></title>
    <link href="http://blog.poyi.tw/blog/2013/03/03/aspnet-auto-return/"/>
    <updated>2013-03-03T12:48:00+08:00</updated>
    <id>http://blog.poyi.tw/blog/2013/03/03/aspnet-auto-return</id>
    <content type="html"><![CDATA[<p>一樣是紀綠一下&hellip;</p>

<pre><code>MailMessage mailMessage = new MailMessage();
mailMessage.IsBodyHtml = true;

mailMessage.To.Add(emailAddress);
mailMessage.CC.Add(cCMailAddress);

MailAddress fromWho = new MailAddress(senderMailAddress);
mailMessage.From = fromWho;
mailMessage.Subject = title;
mailMessage.Body = "這邊可放html"

SmtpClient mailSmtp = new SmtpClient(mailServer,mailServerPort);

mailSmtp.Send(mailMessage);
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[C#] DataTable 的操作備忘]]></title>
    <link href="http://blog.poyi.tw/blog/2013/03/03/c-datatable-operation-memos/"/>
    <updated>2013-03-03T12:05:00+08:00</updated>
    <id>http://blog.poyi.tw/blog/2013/03/03/c-datatable-operation-memos</id>
    <content type="html"><![CDATA[<p>稍微記一下，相關變化都蠻簡單的</p>

<p>DataTable dt = new DataTable();</p>

<p>// 定義欄位
dt.Columns.Add(&ldquo;name&rdquo;);
dt.Columns.Add(&ldquo;cardNumber&rdquo;);
// 也可定義欄位型態
// dt.Columns.Add(&ldquo;ID&rdquo;, typeof(Int32));</p>

<p>dt.Rows.Add(&ldquo;Bob&rdquo;, &ldquo;12345&rdquo;);
dt.Rows.Add(&ldquo;Ada&rdquo;, &ldquo;10000&rdquo;);
dt.Rows.Add(&ldquo;Kilin&rdquo;,&ldquo;20000&rdquo;);
// 也可用DataRow來存放資料</p>

<p>// 格式相同直接放入GridView
GridView.DataSource = dt;
GridView.DataBind();</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[ASP.NET] Reset Password in Active Directory]]></title>
    <link href="http://blog.poyi.tw/blog/2013/02/14/aspnet-reset-password-in-active-directory/"/>
    <updated>2013-02-14T12:47:00+08:00</updated>
    <id>http://blog.poyi.tw/blog/2013/02/14/aspnet-reset-password-in-active-directory</id>
    <content type="html"><![CDATA[<p>重設密碼建議還是用LDAP去抓USER，以免抓錯人之類的</p>

<pre><code class="C# Reset Password in Active Directory">DirectoryEntry userDirEntry = new DirectoryEntry("LDAP://" + ldapStr, adminAccount, adminPassword);
userDirEntry.Invoke("SetPassword", CreateRandomPassword(8));    // 重設新密碼
userDirEntry.CommitChanges();


userDirEntry.Properties["pwdLastSet"].Value = 0; // 下次登入會強制要求改密碼
userDirEntry.CommitChanges();

userDirEntry.Close();
</code></pre>

<pre><code class="C# Generate Random Password (Winform)">
public static string CreateRandomPassword(int passwordLength) 
{
      string allowedChars = "abcdefghijkmnprstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789~!@#$%^&amp;*()_+?";
      char[] chars = new char[passwordLength];
      for (int i = 0; i &lt; passwordLength; i++)
      {
            chars[i] = allowedChars[rd.Next(0, allowedChars.Length)];   
            // random.next(min,max) =&gt;int
      }
      string strPwd = new string(chars);

      while (!((Regex.IsMatch(strPwd, "[0-9]")) &amp;&amp; 
      (Regex.IsMatch(strPwd, "[a-z]")) &amp;&amp; 
      (Regex.IsMatch(strPwd, "[A-Z]")) &amp;&amp; 
      (Regex.IsMatch(strPwd, @"[\W]"))))    
      // \w  [a-zA-Z0-9_]  , \W ![a-zA-Z0-9_]
      {
            strPwd = CreateRandomPassword(8);   
      }

      return strPwd;
}

// 靜態避免短時期內產生相同亂數
static Random rd = new Random(GetRandomSeed());
static int GetRandomSeed()
{
      byte[] bytes = new byte[4];
      System.Security.Cryptography.RNGCryptoServiceProvider rng = 
      new System.Security.Cryptography.RNGCryptoServiceProvider();
      rng.GetBytes(bytes);
      return BitConverter.ToInt32(bytes, 0);
}
</code></pre>
]]></content>
  </entry>
  
</feed>
