<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Bob 學習筆記]]></title>
  <link href="http://blog.poyi.tw/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.poyi.tw/"/>
  <updated>2019-06-07T23:12:53+08:00</updated>
  <id>http://blog.poyi.tw/</id>
  <author>
    <name><![CDATA[Bob (PoYi)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Ubuntu] Ruby on Rails 基本環境建置 - Ubuntu 18.04 LTS]]></title>
    <link href="http://blog.poyi.tw/blog/2019/05/26/rails-ubuntu-environment-ubuntu18-dot-04/"/>
    <updated>2019-05-26T15:28:03+08:00</updated>
    <id>http://blog.poyi.tw/blog/2019/05/26/rails-ubuntu-environment-ubuntu18-dot-04</id>
    <content type="html"><![CDATA[<pre><code class="bash user">sudo adduser deploy
sudo adduser deploy sudo
exit
</code></pre>

<pre><code class="bash required libraries">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
sudo add-apt-repository ppa:chris-lea/redis-server
sudo apt-get update
sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev software-properties-common libffi-dev dirmngr gnupg apt-transport-https ca-certificates redis-server redis-tools nodejs yarn
</code></pre>

<pre><code class="bash ruby">git clone https://github.com/rbenv/rbenv.git ~/.rbenv
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bashrc
echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bashrc
git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' &gt;&gt; ~/.bashrc
git clone https://github.com/rbenv/rbenv-vars.git ~/.rbenv/plugins/rbenv-vars
exec $SHELL
rbenv install 2.6.1
rbenv global 2.6.1
</code></pre>

<pre><code class="bash bundler">gem install bundler
gem install bundler -v 1.17.3
</code></pre>

<pre><code class="bash NGINX & Passenger">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 561F9B9CAC40B2F7
sudo sh -c 'echo deb https://oss-binaries.phusionpassenger.com/apt/passenger bionic main &gt; /etc/apt/sources.list.d/passenger.list'
sudo apt-get update
sudo apt-get install -y nginx-extras libnginx-mod-http-passenger
if [ ! -f /etc/nginx/modules-enabled/50-mod-http-passenger.conf ]; then sudo ln -s /usr/share/nginx/modules-available/mod-http-passenger.load /etc/nginx/modules-enabled/50-mod-http-passenger.conf ; fi
sudo ls /etc/nginx/conf.d/mod-http-passenger.conf
</code></pre>

<pre><code class="bash /etc/nginx/conf.d/mod-http-passenger.conf"># 加上
passenger_ruby /home/bob/.rbenv/shims/ruby;
</code></pre>

<pre><code class="bash /etc/nginx/sites-enabled/myapp">server {
  listen 80;
  listen [::]:80;

  server_name _;
  root /home/bob/myapp/current/public;

  passenger_enabled on;
  passenger_app_env production;

  location /cable {
    passenger_app_group_name myapp_websocket;
    passenger_force_max_concurrent_requests_per_process 0;
  }

  # Allow uploads up to 100MB in size
  client_max_body_size 100m;

  location ~ ^/(assets|packs) {
    expires max;
    gzip_static on;
  }
}
</code></pre>

<pre><code class="bash mysql">sudo apt-get install mysql-server mysql-client libmysqlclient-dev
sudo mysql_secure_installation
</code></pre>

<pre><code class="bash /etc/redis/redis.conf">supervised systemd
</code></pre>

<p>Reference:</p>

<p><a href="https://gorails.com/deploy/ubuntu/18.04">https://gorails.com/deploy/ubuntu/18.04</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ubuntu] Ruby on Rails 基本環境建置 - Ubuntu 16.04 LTS]]></title>
    <link href="http://blog.poyi.tw/blog/2016/11/26/rails-ubuntu-environment-ubuntu16-dot-04/"/>
    <updated>2016-11-26T16:56:10+08:00</updated>
    <id>http://blog.poyi.tw/blog/2016/11/26/rails-ubuntu-environment-ubuntu16-dot-04</id>
    <content type="html"><![CDATA[<pre><code class="bash 建立user">sudo adduser bob
sudo adduser bob sudo
su bob
</code></pre>

<pre><code class="bash 安裝常用lib">sudo apt-get update
sudo apt-get upgrade
sudo apt-get install vim nodejs autoconf
sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev
</code></pre>

<h2>Install Ruby &amp; Rails</h2>

<pre><code class="bash 使用rbenv來管理ruby">cd
git clone https://github.com/rbenv/rbenv.git ~/.rbenv
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bashrc
echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bashrc
exec $SHELL

git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' &gt;&gt; ~/.bashrc
exec $SHELL

rbenv install 2.3.1
rbenv global 2.3.1
# rbenv shell 2.3.1 
# rbenv local 2.3.1
# rbenv global 2.3.1
ruby -v

# rvm 
# sudo apt-get install libgdbm-dev libncurses5-dev automake libtool bison libffi-dev
# gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
# curl -sSL https://get.rvm.io | bash -s stable
# source ~/.rvm/scripts/rvm
# rvm install 2.3.1
# rvm use 2.3.1 --default

# skip doc
echo "gem: --no-ri --no-rdoc" &gt; ~/.gemrc

gem install bundler
</code></pre>

<h2>Install Passenger &amp; Nginx</h2>

<pre><code class="bash install nginx">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 561F9B9CAC40B2F7
sudo apt-get install -y apt-transport-https ca-certificates

# Add Passenger APT repository
sudo sh -c 'echo deb https://oss-binaries.phusionpassenger.com/apt/passenger xenial main &gt; /etc/apt/sources.list.d/passenger.list'
sudo apt-get update

# Install Passenger &amp; Nginx
sudo apt-get install -y nginx-extras passenger

sudo service nginx start
</code></pre>

<pre><code class="bash /etc/nginx/nginx.conf">##
# Phusion Passenger
##
# Uncomment it if you installed ruby-passenger or ruby-passenger-enterprise
##

include /etc/nginx/passenger.conf;
</code></pre>

<pre><code class="bash /etc/nginx/passenger.conf"># 加上
passenger_root /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini;
passenger_ruby /home/bob/.rbenv/shims/ruby;
</code></pre>

<pre><code class="bash /etc/nginx/sites-enabled/default">server {
        listen 80 default_server;
        listen [::]:80 default_server ipv6only=on;

        server_name poyi.com;
        passenger_enabled on;
        rails_env    production;
        root         /home/bob/poyi/public;

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # 註解掉
        # root /var/www/html;
}
</code></pre>

<h2>Install Mysql</h2>

<pre><code class="bash 安裝mysql">sudo apt-get install mysql-server mysql-client libmysqlclient-dev
</code></pre>

<h2>Install Redis</h2>

<pre><code class="bash 安裝redis">sudo apt-get update
sudo apt-get install build-essential tcl

cd /tmp
curl -O http://download.redis.io/redis-stable.tar.gz
tar xzvf redis-stable.tar.gz
cd redis-stable
make
make test
sudo make install

sudo mkdir /etc/redis
sudo cp /tmp/redis-stable/redis.conf /etc/redis
</code></pre>

<pre><code class="bash 修改/etc/redis/redis.conf"># 兩個地方要改
supervised systemd
dir /var/lib/redis
</code></pre>

<pre><code class="bash 新增/etc/systemd/system/redis.service">[Unit]
Description=Redis In-Memory Data Store
After=network.target

[Service]
User=redis
Group=redis
ExecStart=/usr/local/bin/redis-server /etc/redis/redis.conf
ExecStop=/usr/local/bin/redis-cli shutdown
Restart=always

[Install]
WantedBy=multi-user.target
</code></pre>

<pre><code class="bash 新增redis user並給權限">sudo adduser --system --group --no-create-home redis
sudo mkdir /var/lib/redis
sudo chown redis:redis /var/lib/redis
sudo chmod 770 /var/lib/redis
</code></pre>

<pre><code class="bash">sudo systemctl enable redis # 設定開機啟動
sudo systemctl start redis
sudo systemctl stop redis
sudo systemctl status redis
</code></pre>

<h2>Install SSDB</h2>

<pre><code class="bash 安裝ssdb">wget --no-check-certificate https://github.com/ideawu/ssdb/archive/master.zip
unzip master
cd ssdb-master
make
sudo make install
</code></pre>

<pre><code class="bash 新增/etc/systemd/system/ssdb.service">[Unit]
Description=SSDB
After=network.target

[Service]
LimitCORE=infinity
LimitNOFILE=100000
LimitNPROC=100000
PIDFile=/usr/local/ssdb/var/ssdb.pid
WorkingDirectory=/usr/local/ssdb
ExecStart=/usr/local/ssdb/ssdb-server /usr/local/ssdb/ssdb.conf -s restart -d
ExecStop=/usr/local/ssdb/ssdb-server /usr/local/ssdb/ssdb.conf -s stop -d
Type=forking
KillMode=none
Restart=on-failure
RestartSec=10s
User=root

[Install]
WantedBy=multi-user.target
</code></pre>

<pre><code class="bash">sudo systemctl enable ssdb # 設定開機啟動
sudo systemctl start ssdb
sudo systemctl stop ssdb
sudo systemctl status ssdb
</code></pre>

<h3>這邊先跳過 capistrano deploy</h3>

<p>Reference:</p>

<p><a href="https://gorails.com/deploy/ubuntu/16.04">https://gorails.com/deploy/ubuntu/16.04</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Mac] Ruby on Rails 基本環境建置 - 10.14 Mojave]]></title>
    <link href="http://blog.poyi.tw/blog/2016/10/30/rails-mac-os-environment-sierra/"/>
    <updated>2016-10-30T15:39:21+08:00</updated>
    <id>http://blog.poyi.tw/blog/2016/10/30/rails-mac-os-environment-sierra</id>
    <content type="html"><![CDATA[<pre><code class="bash Installing Homebrew">ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code></pre>

<pre><code class="bash Installing Ruby"># 改用相對輕量的rbenv取代肥肥的rvm
brew install rbenv ruby-build

echo 'if which rbenv &gt; /dev/null; then eval "$(rbenv init -)"; fi' &gt;&gt; ~/.bash_profile
source ~/.bash_profile

rbenv install 2.6.3
rbenv global 2.6.3
</code></pre>

<pre><code class="bash Installing Rails">gem install rails -v 6.0.0.rc1
rbenv rehash
</code></pre>

<pre><code class="bash others">brew install mysql
brew install redis
brew install ssdb
brew install memcached
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Rails] 各種update method]]></title>
    <link href="http://blog.poyi.tw/blog/2015/07/11/rails-various-update-methods/"/>
    <updated>2015-07-11T17:16:55+08:00</updated>
    <id>http://blog.poyi.tw/blog/2015/07/11/rails-various-update-methods</id>
    <content type="html"><![CDATA[<h2>正規Rails的更新 - update</h2>

<p>會觸發validation、callback、也會更新updated_at</p>

<pre><code class="Ruby update 寫法 (for 單筆)">&gt; Comment.last.update(message: 'bbb')
   (0.1ms)  begin transaction
  SQL (0.4ms)  UPDATE "comments" SET "message" = ?, "updated_at" = ? WHERE "comments"."id" = ?  [["message", "bbb"], ["updated_at", "2015-07-11 09:42:02.303661"], ["id", 200]]
   (9.1ms)  commit transaction
 =&gt; true
</code></pre>

<h2>相當於直接下SQL的更新 - update_columns, update_all</h2>

<p>而 update_columns 及 update_all 是直接幫你下SQL更新欄位，會忽視Rails的validation，也沒有callback，updated_at也不會更新。所以最好是很確定要更新的值沒問題再使用這類語法。</p>

<pre><code class="Ruby update_columns 寫法 (for 單筆)">&gt; Comment.where(:id =&gt; 200).first.update_columns(message: 'bbbbb', post_id: 3)
  SQL (9.2ms)  UPDATE "comments" SET "message" = 'bbbbb', "post_id" = 3 WHERE "comments"."id" = ?  [["id", 200]]

# update_column 跟 update_columns 相同，只是傳入值key跟value必須是string，並用逗點分隔
&gt; Comment.where(:id =&gt; 200).first.update_column('message' ,'bbbbb')
</code></pre>

<pre><code class="Ruby update_all 寫法 (for relation)">&gt; Comment.where(:id =&gt; 200).update_all(message: 'aaaaaaaaaa', post_id: 10)
  SQL (9.2ms)  UPDATE "comments" SET "message" = 'aaaaaaaaaa', "post_id" = 10 WHERE "comments"."id" = ?  [["id", 200]]
 =&gt; 1
</code></pre>

<h2>其他 - update_attribute</h2>

<p>忽視validation，有callback，會更新updated_at</p>

<pre><code class="Ruby update_attribute 寫法 (for 單筆)">&gt; Comment.last.update_attribute('message' ,'bbbbb')
   (0.1ms)  begin transaction
  SQL (0.4ms)  UPDATE "comments" SET "message" = ?, "updated_at" = ? WHERE "comments"."id" = ?  [["message", "bbbbb"], ["updated_at", "2015-07-11 09:45:55.190026"], ["id", 200]]
   (8.5ms)  commit transaction
 =&gt; true
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Rails] AJAX render errors in json]]></title>
    <link href="http://blog.poyi.tw/blog/2015/06/12/rails-ajax-render-error-in-json/"/>
    <updated>2015-06-12T19:02:48+08:00</updated>
    <id>http://blog.poyi.tw/blog/2015/06/12/rails-ajax-render-error-in-json</id>
    <content type="html"><![CDATA[<pre><code class="javascript new.html.erb">$.ajax({
  url: URL,
  async:false,
  data:{
    amount: 100,
  },
  dataType:'json',
  method:'post',
  success:function(data){
    // do success things
  },
  error:function(xhr){
    var errors = $.parseJSON(xhr.responseText).errors
    alert(errors);
  }
);
</code></pre>

<pre><code class="ruby orders_controller.rb ">def create
  if amount &lt; 100
    render :json =&gt; { :errors =&gt; "金額不足" }, :status =&gt; 422
    return 
  end
end
</code></pre>

<p>當錯誤回傳時，使用422(Unprocessable Entity)來做error handling</p>

<p>Reference:</p>

<p><a href="http://travisjeffery.com/b/2012/04/rendering-errors-in-json-with-rails/">http://travisjeffery.com/b/2012/04/rendering-errors-in-json-with-rails/</a>
<a href="http://stackoverflow.com/questions/16133923/400-vs-422-response-to-post-of-data">http://stackoverflow.com/questions/16133923/400-vs-422-response-to-post-of-data</a></p>
]]></content>
  </entry>
  
</feed>
