<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ubuntu | Bob 學習筆記]]></title>
  <link href="http://blog.poyi.tw/blog/categories/ubuntu/atom.xml" rel="self"/>
  <link href="http://blog.poyi.tw/"/>
  <updated>2017-01-16T11:33:02+08:00</updated>
  <id>http://blog.poyi.tw/</id>
  <author>
    <name><![CDATA[Bob (PoYi)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[Ubuntu] Ruby on Rails 基本環境建置 - Ubuntu 16.04 LTS]]></title>
    <link href="http://blog.poyi.tw/blog/2016/11/26/rails-ubuntu-environment-ubuntu16-dot-04/"/>
    <updated>2016-11-26T16:56:10+08:00</updated>
    <id>http://blog.poyi.tw/blog/2016/11/26/rails-ubuntu-environment-ubuntu16-dot-04</id>
    <content type="html"><![CDATA[<pre><code class="bash 建立user">sudo adduser bob
sudo adduser bob sudo
su bob
</code></pre>

<pre><code class="bash 安裝常用lib">sudo apt-get update
sudo apt-get upgrade
sudo apt-get install vim nodejs
sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev
</code></pre>

<pre><code class="bash 使用rbenv來管理ruby">cd
git clone https://github.com/rbenv/rbenv.git ~/.rbenv
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bashrc
echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bashrc
exec $SHELL

git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' &gt;&gt; ~/.bashrc
exec $SHELL

rbenv install 2.3.1
rbenv global 2.3.1
ruby -v

# rvm 
# sudo apt-get install libgdbm-dev libncurses5-dev automake libtool bison libffi-dev
# gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
# curl -sSL https://get.rvm.io | bash -s stable
# source ~/.rvm/scripts/rvm
# rvm install 2.3.1
# rvm use 2.3.1 --default

# skip doc
echo "gem: --no-ri --no-rdoc" &gt; ~/.gemrc

gem install bundler
</code></pre>

<pre><code class="bash 安裝mysql">sudo apt-get install mysql-server mysql-client libmysqlclient-dev
</code></pre>

<pre><code class="bash install nginx">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 561F9B9CAC40B2F7
sudo apt-get install -y apt-transport-https ca-certificates

# Add Passenger APT repository
sudo sh -c 'echo deb https://oss-binaries.phusionpassenger.com/apt/passenger xenial main &gt; /etc/apt/sources.list.d/passenger.list'
sudo apt-get update

# Install Passenger &amp; Nginx
sudo apt-get install -y nginx-extras passenger

sudo service nginx start
</code></pre>

<pre><code class="bash /etc/nginx/nginx.conf">##
# Phusion Passenger
##
# Uncomment it if you installed ruby-passenger or ruby-passenger-enterprise
##

include /etc/nginx/passenger.conf;
</code></pre>

<pre><code class="bash /etc/nginx/passenger.conf"># 加上
passenger_root /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini;
passenger_ruby /home/bob/.rbenv/shims/ruby;
</code></pre>

<pre><code class="bash /etc/nginx/sites-enabled/default">server {
        listen 80 default_server;
        listen [::]:80 default_server ipv6only=on;

        server_name poyi.com;
        passenger_enabled on;
        rails_env    production;
        root         /home/bob/poyi/public;

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # 註解掉
        # root /var/www/html;
}
</code></pre>

<h3>這邊先跳過 capistrano deploy</h3>

<p>Reference:</p>

<p><a href="https://gorails.com/deploy/ubuntu/16.04">https://gorails.com/deploy/ubuntu/16.04</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ubuntu] Linux 稍微進階的常用指令]]></title>
    <link href="http://blog.poyi.tw/blog/2016/10/19/my-linux-command/"/>
    <updated>2016-10-19T19:01:28+08:00</updated>
    <id>http://blog.poyi.tw/blog/2016/10/19/my-linux-command</id>
    <content type="html"><![CDATA[<h4>稍微進階是對我來說啦</h4>

<h2>grep</h2>

<pre><code class="bash 找該目錄底下所有出現'bob'的檔案">grep -r 'bob' *
</code></pre>

<p><code>bash 找abc.txt內所有出現'bob'或'poyi'的內容 (| =&gt; OR)
grep -E 'bob|poyi' abc.txt
egrep 'bob|poyi' abc.txt
</code></p>

<p><code>bash 找abc.txt內所有出現'bob'及'poyi'的內容 (.* =&gt; AND)
grep -E 'bob.*poyi|200.*poyi' abc.txt
</code></p>

<pre><code class="bash 找abc.txt內沒有出現'bob'的內容 (NOT)">grep -v 'bob' abc.txt
</code></pre>

<h2>find 找檔案</h2>

<pre><code class="bash 在/home目錄下找檔名為production.log的檔案">find /home -name production.log
find /home -iname production.log # 不分大小寫
</code></pre>

<pre><code class="bash 在/home目錄下找所有的log folder">find /home -type d -name log
</code></pre>

<h2>locate 找檔案(查系統index，不是直接掃目錄)</h2>

<pre><code class="bash ">locate nginx.conf
</code></pre>

<ul>
<li>Ctrl + c : 終止正在執行的程式</li>
<li><p>Ctrl + l : clear</p></li>
<li><p>Ctrl + w : 刪除文字至上一個空白</p></li>
<li>Ctrl + u : 刪除游標前</li>
<li>Ctrl + k : 刪除游標後</li>
<li>Ctrl + h : Backspace</li>
<li><p>Ctrl + d : Del</p></li>
<li><p>Ctrl + a : 游標移到最前面</p></li>
<li>Ctrl + e : 游標移到最後面</li>
<li>Ctrl + f : 往右移一個字元</li>
<li>Ctrl + b : 往左移一個字元</li>
</ul>


<p>Reference:</p>

<p><a href="http://www.arthurtoday.com/2010/12/ubuntu-findlocatewhereiswhich.html">http://www.arthurtoday.com/2010/12/ubuntu-findlocatewhereiswhich.html</a></p>

<p><a href="http://blog.jex.tw/blog/2013/11/26/grep/">http://blog.jex.tw/blog/2013/11/26/grep/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ubuntu] Linux 基本的安全設定]]></title>
    <link href="http://blog.poyi.tw/blog/2016/08/25/linux-some-common-security-setting/"/>
    <updated>2016-08-25T20:54:54+08:00</updated>
    <id>http://blog.poyi.tw/blog/2016/08/25/linux-some-common-security-setting</id>
    <content type="html"><![CDATA[<h2>列幾個基本款常見的一些設定</h2>

<h2>ssh port更換到別的port</h2>

<pre><code class="bash ssh port更換到別的port">$ sudo vim /etc/ssh/sshd_config
Port 1968
$ sudo service sshd restart
</code></pre>

<h2>開始自動安全性更新</h2>

<pre><code class="bash 開始自動安全性更新"> $ sudo apt-get install unattended-upgrades
 $ sudo dpkg-reconfigure -plow unattended-upgrades
 $ sudo vim /etc/apt/apt.conf.d/50unattended-upgrades
</code></pre>

<h2>ssh 登入盡量用 key-exchange 方式</h2>

<h2>fail2ban - 自動ban掉多次嘗試登入者</h2>

<pre><code class="bash fail2ban基本設定">$ sudo apt-get install fail2ban

# 保留原始conf檔，把設定都寫在.local
$ sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local 
$ vim /etc/fail2ban/jail.local 
# 將enabled改成true
  [DEFAULT]
    ignoreip = 127.0.0.1/8
    bantime  = 600
    findtime = 600
    maxretry = 5
    backend  = auto
    enabled = true

# 啟動
$ sudo service fail2ban start

# 看目前狀態，目前有一個被ban
$ sudo fail2ban-client status
Status
|- Number of jail:      1
`- Jail list:   sshd

# detail
$ sudo fail2ban-client status sshd
Status for the jail: sshd
|- Filter
|  |- Currently failed: 1
|  |- Total failed:     6
|  `- File list:        /var/log/auth.log
`- Actions
   |- Currently banned: 1
   |- Total banned:     1
   `- Banned IP list:   111.248.10.10
</code></pre>

<h2>設定iptables</h2>

<h4>用來過濾該網路封包是否能進出server，預設都是開啟的，若是沒有外部防火牆的話還蠻危險的</h4>

<pre><code>### clear tables
iptables --flush
iptables --delete-chain
iptables --table mangle --flush
iptables --table mangle --delete-chain

### default policies
iptables --policy INPUT   DROP
iptables --policy OUTPUT  DROP
iptables --policy FORWARD DROP

### loopback
iptables --append INPUT  --in-interface lo --jump ACCEPT
iptables --append OUTPUT --out-interface lo --jump ACCEPT

### existing connections
iptables --append INPUT  --match conntrack --ctstate ESTABLISHED,RELATED --jump ACCEPT
iptables --append OUTPUT --match conntrack --ctstate ESTABLISHED,RELATED --jump ACCEPT

### trashlog chain
iptables --new-chain trashlog
iptables --append trashlog --jump LOG --log-level notice --log-prefix "trashlog: "
iptables --append trashlog --jump DROP

### INPUT
iptables --append INPUT  --protocol tcp --dport 22 --match conntrack --ctstate NEW --jump ACCEPT
iptables --append INPUT  --protocol tcp --dport 80 --match conntrack --ctstate NEW --jump ACCEPT
iptables --append INPUT  --protocol tcp --dport 443 --match conntrack --ctstate NEW --jump ACCEPT

### OUTPUT
iptables --append OUTPUT --jump ACCEPT

...


# 其他客製化設定可參考
# https://gist.github.com/virtualstaticvoid/1024546
</code></pre>

<h2>Logrotate.conf</h2>

<h4>OS層的log大多紀錄在/var/log/底下，而預設開啟logrotate</h4>

<h4>調整/etc/logrotate.conf的自動rotate，把時間拉長或是不使用rotate</h4>

<ul>
<li>syslog 系統日誌</li>
<li>dpkg.log 軟體安裝及更新紀錄</li>
<li>auth.log 身份確認相關紀錄(使用sudo)</li>
</ul>


<pre><code class="bash /etc/logrotate.conf"># (略)
</code></pre>

<pre><code class="bash /etc/logrotate.d"># (略)
</code></pre>

<pre><code class="bash wtmp user登入次數及使用時間紀錄">$ last
$ last -f /var/log/wtmp
bob      pts/1        1.1.1.1   Tue Aug 23 13:22   still logged in
bob      pts/1        1.1.1.1   Sun Aug 14 06:34 - 06:45  (00:10)
bob      pts/0        1.1.1.1   Sun Aug 14 05:44 - 08:45  (03:00)
bob      pts/0        1.1.1.1   Sat Aug  6 13:14 - 05:44 (7+16:29)
</code></pre>

<pre><code class="bash wtmp user登入失敗紀錄">$ sudo lastb
$ last -f /var/log/btmp
bob      pts/1        1.1.1.1   Tue Aug 23 13:22   still logged in
bob      pts/1        1.1.1.1   Sun Aug 14 06:34 - 06:45  (00:10)
bob      pts/0        1.1.1.1   Sun Aug 14 05:44 - 08:45  (03:00)
bob      pts/0        1.1.1.1   Sat Aug  6 13:14 - 05:44 (7+16:29)
</code></pre>

<h2>關閉root ssh登入</h2>

<pre><code class="bash /etc/ssh/sshd_config"># Authentication:
LoginGraceTime 120
PermitRootLogin prohibit-password 
# 新版本ssh root登入預設不能使用密碼登入，僅可用key(有設定的話)
# 也可以直接改成 PermitRootLogin no 直接擋掉
StrictModes yes
</code></pre>

<p>Reference:</p>

<p><a href="https://blog.camel2243.com/2016/02/29/ubuntu-fail2ban-%E9%98%B2%E6%AD%A2-ssh-%E6%9A%B4%E5%8A%9B%E5%98%97%E8%A9%A6%E5%AF%86%E7%A2%BC/">https://blog.camel2243.com/2016/02/29/ubuntu-fail2ban-%E9%98%B2%E6%AD%A2-ssh-%E6%9A%B4%E5%8A%9B%E5%98%97%E8%A9%A6%E5%AF%86%E7%A2%BC/</a></p>

<p><a href="http://www.vixual.net/blog/archives/252">http://www.vixual.net/blog/archives/252</a></p>

<p><a href="http://yuanann.pixnet.net/blog/post/16610463-linux-%3Assh-%E6%9B%B4%E6%94%B9%E9%A0%90%E8%A8%ADport%E7%9A%84%E6%96%B9%E6%B3%95">http://yuanann.pixnet.net/blog/post/16610463-linux-%3Assh-%E6%9B%B4%E6%94%B9%E9%A0%90%E8%A8%ADport%E7%9A%84%E6%96%B9%E6%B3%95</a></p>

<p><a href="https://help.ubuntu.com/lts/serverguide/automatic-updates.html">https://help.ubuntu.com/lts/serverguide/automatic-updates.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ubuntu] 自行簽署的SSL憑證及Nginx設定]]></title>
    <link href="http://blog.poyi.tw/blog/2016/07/14/ssl-certificate-nginx-ubuntu-config/"/>
    <updated>2016-07-14T20:00:55+08:00</updated>
    <id>http://blog.poyi.tw/blog/2016/07/14/ssl-certificate-nginx-ubuntu-config</id>
    <content type="html"><![CDATA[<p>自簽SSL單純只是讓資料傳送時加密，避免使用明文傳輸資料而被直接監聽到封包</p>

<p>要上Production的話還是必須找SSL服務來簽</p>

<pre><code class="bash openssl"># 我習慣在nginx把ssl裝在opt/nginx底下
mkdir /opt/nginx/ssl
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /opt/nginx/ssl/nginx.key -out /opt/nginx/ssl/nginx.crt
# 填寫基本資料
# Common Name 填 Domain Name 或 IP
# 建立金鑰nginx.key及憑證nginx.crt
</code></pre>

<pre><code class="bash nginx.conf">server {
  listen 80 default_server;

  # 將所有HTTP requests轉至HTTPS
  return 301 https://$host$request_uri;
}

server {
  listen 443 ssl default_server;

  ssl_certificate /opt/nginx/ssl/nginx.crt;
  ssl_certificate_key /opt/nginx/ssl/nginx.key;

  # 其他ssl參數設定
  ...

  server_name default_server;
  root /home/path/rails/public;   # &lt;--- rails路徑
  rails_env production;
  passenger_enabled on;
}
</code></pre>

<pre><code class="bash 產dhparam -out">sudo openssl dhparam -out /opt/nginx/ssl/dhparam.pem 2048
</code></pre>

<p>SSL設定最佳解可以參考 <a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/">https://mozilla.github.io/server-side-tls/ssl-config-generator/</a></p>

<p>Reference:</p>

<p><a href="https://blog.gtwang.org/linux/nginx-create-and-install-ssl-certificate-on-ubuntu-linux/">https://blog.gtwang.org/linux/nginx-create-and-install-ssl-certificate-on-ubuntu-linux/</a></p>

<p><a href="https://ksmx.me/letsencrypt-ssl-https/">https://ksmx.me/letsencrypt-ssl-https/</a></p>

<p><a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/">https://mozilla.github.io/server-side-tls/ssl-config-generator/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ubuntu] 架設 OpenVpn Server & Client]]></title>
    <link href="http://blog.poyi.tw/blog/2016/03/05/ubuntu-openvpn-server-client/"/>
    <updated>2016-03-05T11:42:49+08:00</updated>
    <id>http://blog.poyi.tw/blog/2016/03/05/ubuntu-openvpn-server-client</id>
    <content type="html"><![CDATA[<h2>OpenVpn</h2>

<pre><code class="bash">apt-get update
apt-get install openvpn easy-rsa
</code></pre>

<pre><code class="bash">gunzip -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz &gt; /etc/openvpn/server.conf
vim /etc/openvpn/server.conf
</code></pre>

<pre><code class="bash /etc/openvpn/server.conf"># dh dh1024.pem
dh2048.pem

ca ca.crt
cert server.crt
key server.key

# 拿掉註解
push "redirect-gateway def1 bypass-dhcp"
user nobody
group nogroup
# 補上8.8.8.8
push "dhcp-option DNS 8.8.8.8"
;push "dhcp-option DNS 208.67.222.222"
;push "dhcp-option DNS 208.67.220.220"

#其他基本上維持預設即可
</code></pre>

<h3>Packet Forwarding</h3>

<pre><code class="bash">echo 1 &gt; /proc/sys/net/ipv4/ip_forward
vim /etc/sysctl.conf
</code></pre>

<pre><code class="bash /etc/sysctl.conf"># 拿掉註解
net.ipv4.ip_forward=1
</code></pre>

<h3>Uncomplicated Firewall</h3>

<pre><code class="bash">ufw allow ssh
ufw allow 1194/udp
ufw allow 80 # 開外連進來所需要的port
vim /etc/default/ufw
</code></pre>

<pre><code class="bash /etc/default/ufw"># 將DROP改成ACCEPT
DEFAULT_FORWARD_POLICY="ACCEPT"
</code></pre>

<pre><code class="bash">vim /etc/ufw/before.rules
</code></pre>

<p>&#8220;`bash /etc/ufw/before.rules 加入OPENVPN RULES(11~18行)
#</p>

<h1>rules.before</h1>

<p>#</p>

<h1>Rules that should be run before the ufw command line added rules. Custom</h1>

<h1>rules should be added to one of these chains:</h1>

<h1>ufw-before-input</h1>

<h1>ufw-before-output</h1>

<h1>ufw-before-forward</h1>

<p>#</p>

<h1>START OPENVPN RULES</h1>

<h1>NAT table rules</h1>

<p>*nat
:POSTROUTING ACCEPT [0:0]</p>

<h1>Allow traffic from OpenVPN client to ppp0</h1>

<p>-A POSTROUTING -s 10.8.0.0/8 -o ppp0 -j MASQUERADE
COMMIT</p>

<h1>END OPENVPN RULES</h1>

<pre><code></code></pre>

<p>ufw enable
ufw status
&#8220;`</p>

<h3>Generate Certificate Authority</h3>

<pre><code class="bash">cp -r /usr/share/easy-rsa/ /etc/openvpn
mkdir /etc/openvpn/easy-rsa/keys
vim /etc/openvpn/easy-rsa/vars
</code></pre>

<pre><code class="bash /etc/openvpn/easy-rsa/vars">export KEY_COUNTRY=“TW”
export KEY_PROVINCE=“Taiwan”
export KEY_CITY=“Taipei”
export KEY_ORG="My Company Name"
export KEY_EMAIL="sammy@example.com"
export KEY_OU="MYOrganizationalUnit"

export KEY_NAME=“server”
</code></pre>

<pre><code class="bash">openssl dhparam -out /etc/openvpn/dh2048.pem 2048
cd /etc/openvpn/easy-rsa
. ./vars
./clean-all
./build-ca
</code></pre>

<h3>Generate Server-side Key</h3>

<pre><code class="bash">./build-key-server server
cp /etc/openvpn/easy-rsa/keys/{server.crt,server.key,ca.crt} /etc/openvpn
</code></pre>

<p>啟動Server</p>

<pre><code class="bash">service openvpn start
service openvpn status
# service openvpn stop
</code></pre>

<h3>Generate Client-side Key</h3>

<pre><code class="bash">./build-key bob01
mkdir /etc/openvpn/bob01
cp /etc/openvpn/easy-rsa/keys/bob01.crt,bob01.key /etc/openvpn/bob01/
cp /etc/openvpn/easy-rsa/ca.crt /etc/openvpn/bob01/
cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf  /etc/openvpn/bob01/bob01.ovpn
vim /etc/openvpn/bob01/bob01.ovpn
</code></pre>

<pre><code class="bash /etc/openvpn/bob01/bob01.ovpn">remote MY_SERVER_IP 1194
ca ca.crt
cert bob01.crt
key bob01.key
</code></pre>

<p>最後在client端把/etc/openvpn/bob01/抓下來，用bob01.ovpn啟動即可</p>
]]></content>
  </entry>
  
</feed>
